import asyncio
import logging  
import time
import re
import random
import html
import aiohttp
import os

from aiohttp import ClientSession
from collections import Counter
from nudenet import NudeDetector
from io import BytesIO
from collections import deque
from pathlib import Path
from typing import Optional, Callable, Dict, Any, Awaitable, Tuple
from aiogram import Bot, Dispatcher, Router, types, F, BaseMiddleware
from aiogram.utils.text_decorations import HtmlDecoration
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, LabeledPrice, PreCheckoutQuery, BufferedInputFile, ChatMemberAdministrator, ChatInviteLink, LabeledPrice, PreCheckoutQuery
from aiogram.types import File as TgFile
from aiogram.types.input_file import FSInputFile
from aiogram.exceptions import (
    TelegramAPIError, TelegramBadRequest, TelegramNotFound, TelegramForbiddenError,
    TelegramConflictError, TelegramUnauthorizedError, TelegramRetryAfter, TelegramMigrateToChat
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from PIL import Image, ImageDraw, ImageFont



try:
    from database import *
    from settings import *
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã database.py –∏ settings.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ.")
    exit()

router = Router()
detector = NudeDetector()
html_detect = HtmlDecoration()

PHOTOS_DIR = Path("photos_users")
PHOTOS_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

def apply_watermark(
    im: Image.Image,
    text: str = "¬©YourBrand",
    font_path: str = "arial.ttf",
    spacing: int = 20,
    opacity: int = 50,
) -> Image.Image:
    w, h = im.size
    layer = Image.new("RGBA", (w, h), (255, 255, 255, 0))
    draw = ImageDraw.Draw(layer)
    size = max(20, w // 20)
    font = ImageFont.truetype(font_path, size)
    bbox = draw.textbbox((0, 0), text, font=font)
    tw, th = bbox[2] - bbox[0], bbox[3] - bbox[1]

    for y in range(0, h, th + spacing):
        for x in range(0, w, tw + spacing):
            draw.text((x, y), text, font=font, fill=(255, 255, 255, opacity))

    return Image.alpha_composite(im.convert("RGBA"), layer).convert("RGB")

class AntiFloodMiddleware(BaseMiddleware):
    def __init__(self, limit: int = 1):
        self.limit = limit
        self.last_time: Dict[int, float] = {}

    async def __call__(
        self,
        handler: Callable[[types.Message | types.CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: types.Message | types.CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            if event.text and event.text.startswith('/start'):
                return await handler(event, data)

            user_id = event.from_user.id
            current_time = time.time()

            if user_id in self.last_time:
                last_time = self.last_time[user_id]
                if (current_time - last_time) < self.limit:
                    await event.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ {:.0f} —Å–µ–∫.".format(self.limit))
                    return

            self.last_time[user_id] = current_time
            return await handler(event, data)

        elif isinstance(event, types.CallbackQuery):
            user_id = event.from_user.id
            current_time = time.time()

            if user_id in self.last_time:
                last_time = self.last_time[user_id]
                if (current_time - last_time) < self.limit:
                    await event.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ {:.0f} —Å–µ–∫.".format(self.limit), show_alert=True)
                    return

            self.last_time[user_id] = current_time
            return await handler(event, data)

class SellState(StatesGroup):
    PRICE_PHOTO = State()
    PHOTO = State()

class AdminState(StatesGroup):
    PROMOCODE_INPUT = State()
    ADD_PROMO_CODE = State()
    REMOVE_PROMO_CODE = State()
    MAILING = State()
    AWARDS = State()
    WITHDRAW = State()
    USERS_CHECK = State()
    ADD_OP = State()
    REMOVE_OP = State()
    EDIT_SPIN_COST = State()
    EDIT_SLOT_REWARD = State()
    REMOVE_AUTO = State()
    ADD_AUTO = State()
    DEPOSIT = State()


async def request_op(user_id, chat_id, first_name, language_code, bot: Bot, ref_id=None, gender=None, is_premium=None):
    headers = {
        'Content-Type': 'application/json',
        'Auth': f'{SUBGRAM_TOKEN}',
        'Accept': 'application/json',
    }
    data = {'UserId': user_id, 'ChatId': chat_id, 'first_name': first_name, 'language_code': language_code}
    if gender:
        data['Gender'] = gender
    if is_premium:
        data['Premium'] = is_premium

    async with aiohttp.ClientSession() as session:
        async with session.post('https://api.subgram.ru/request-op-tokenless/', headers=headers, json=data) as response:
            if not response.ok or response.status != 200:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ SubGram. –ï—Å–ª–∏ —Ç–∞–∫–∞—è –≤–∏–¥–∏—à—å —Ç–∞–∫—É—é –æ—à–∏–±–∫—É - —Å—Ç–∞–≤—å –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Subgram –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π API KEY. –í–æ—Ç –æ—à–∏–±–∫–∞: %s" % str(await response.text()))
                return 'ok'
            response_json = await response.json()

            if response_json.get('status') == 'warning':
                if ref_id:
                    await show_op(chat_id,response_json.get("links",[]), bot, ref_id=ref_id)
                else:
                    await show_op(chat_id,response_json.get("links",[]), bot)
            elif response_json.get('status') == 'gender':
                if ref_id:
                    await show_gender(chat_id, bot, ref_id=ref_id)
                else:
                    await show_gender(chat_id, bot)
            return response_json.get("status")

@router.callback_query(F.data.startswith("subgram-op"))
async def subgram_op_callback(call: CallbackQuery, bot: Bot):
    try:
        user = call.from_user
        user_id = user.id
        ref_id = None
        
        args = call.data.split(':')
        if len(args) > 1 and args[1].isdigit():
            ref_id = int(args[1])
        elif len(args) > 1:
            ref_id = args[1]

        response = await request_op(
            user_id=user_id,
            chat_id=call.message.chat.id,
            first_name=user.first_name,
            language_code=user.language_code,
            bot=bot,
            ref_id=ref_id,
            is_premium=getattr(user, 'is_premium', None)
        )

        if response != 'ok':
            await bot.answer_callback_query(call.id, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
            return

        await bot.answer_callback_query(call.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üëç', show_alert=True)

        if not user_exists(user_id):
            if ref_id is not None:
                await handle_referral_bonus(ref_id, user_id, bot)
                add_user(user_id, user.first_name, ref_id)
            else:
                add_user(user_id, user.first_name)
            
        try:
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await send_main_menu(user_id, bot)
    except Exception as e:
        logging.error(f"Subgram op error: {e}", exc_info=True)
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

async def show_op(chat_id,links, bot: Bot, ref_id=None):
    markup = InlineKeyboardBuilder()
    temp_row = []
    sponsor_count = 0
    for url in links:
        sponsor_count += 1
        name = f'C–ø–æ–Ω—Å–æ—Ä ‚Ññ{sponsor_count}'
        button = types.InlineKeyboardButton(text=name, url=url)
        temp_row.append(button) 

        if sponsor_count % 2 == 0:
            markup.row(*temp_row)
            temp_row = []

    if temp_row:
        markup.row(*temp_row)
    if ref_id != "None":
        item1 = types.InlineKeyboardButton(text='‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω',callback_data=f'subgram-op:{ref_id}')
    else:
        item1 = types.InlineKeyboardButton(text='‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω',callback_data='subgram-op')
    markup.row(item1)
    photo = FSInputFile("photo/check_sub.png")
    await bot.send_photo(chat_id, photo, caption="<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤</b>\n\n<blockquote><b>üíú–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ù–ê–°</b></blockquote>", parse_mode='HTML', reply_markup=markup.as_markup())


async def show_gender(chat_id, bot: Bot, ref_id=None):
    btn_male = types.InlineKeyboardButton(text='üë±‚Äç‚ôÇÔ∏è –ü–∞—Ä–µ–Ω—å', callback_data=f'gendergram_male:{ref_id or "None"}')
    btn_female = types.InlineKeyboardButton(text='üë©‚Äçü¶∞ –î–µ–≤—É—à–∫–∞', callback_data=f'gendergram_female:{ref_id or "None"}')

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [btn_male, btn_female]
    ])

    await bot.send_message(
        chat_id, 
        "<b>üòÆ –°–∏—Å—Ç–µ–º–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π –ø–æ–ª!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, <u>–∫—Ç–æ –≤—ã?</u>", 
        reply_markup=markup, 
        parse_mode='HTML'
    )

@router.callback_query(F.data.startswith('gendergram_'))
async def gendergram(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = call.data.split(':')
    gender = data[0].split('gendergram_')[1]
    ref_id = None
    args = call.data.split(':')
    if len(args) > 1 and args[1].isdigit():
        ref_id = int(args[1])
    elif len(args) > 1:
        ref_id = args[1]
    
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    try:
        await bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await state.update_data(gender=gender)
    response = await request_op(user_id, chat_id, first_name, language_code, bot, ref_id=ref_id, gender=gender, is_premium=is_premium)

    if response == 'ok':
        if not user_exists(user_id):
            if ref_id is not None:
                await handle_referral_bonus(ref_id, user_id, bot)
                add_user(user_id, first_name, ref_id)
            else:
                add_user(user_id, first_name)
        await bot.answer_callback_query(call.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üëç')
        await state.clear()
        await send_main_menu(user_id, bot)
    else:
        await bot.answer_callback_query(call.id, '‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!', show_alert=True)

async def pvo_arabov(lang: str) -> bool:
    if lang not in ALLOWED_LANGUAGE_CODES:
        return False

    return True

@router.message(CommandStart())
async def start_command(message: Message, bot: Bot):
    try:
        user = message.from_user
        user_id = user.id
        
        args = message.text.split()

        if get_banned_user(user_id) == 1:
            await bot.send_message(user_id, "<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!</b>", parse_mode='HTML')
            return

        referral_id = None
        if len(args) > 1:
            referral_id = int(args[1]) if args[1].isdigit() else args[1]

        if not await pvo_arabov(user.language_code):
            username_info = f"\nüìï –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username}" if user.username else ""

            await bot.send_message(
                referral_id,
                f"üìõ <b>–û—à–∏–±–∫–∞: —Ä–µ—Ñ–µ—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —è–∑—ã–∫.</b>\n\n"
                "<blockquote><b>–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ:</b> üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π, üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π, üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π, üá∑üá∫ –†—É—Å—Å–∫–∏–π.</blockquote>"
                f"{username_info}",
                parse_mode='HTML'
            )
            return


        response = await request_op(
                user_id=user_id,
                chat_id=message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=referral_id,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return

        channels = get_channels_ids()
        if not await check_subscription(user_id, channels, bot, referral_id):
            return

        if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
            return
        
        builder_start = InlineKeyboardBuilder()
        buttons = [
            ('üé∞ –ú–∏–Ω–∏-–ò–≥—Ä—ã', 'games'),
            ('üåü –ö—É–ø–∏—Ç—å / –ü—Ä–æ–¥–∞—Ç—å —Ñ–æ—Ç–æ', 'photo_selling'),
            ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
            ('üîÑ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'stars_withdraw'),
            ('üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'get_ref'),
            ('üèÜ –¢–æ–ø', 'top')
        ]

        for text, callback_data in buttons:
            builder_start.button(text=text, callback_data=callback_data)

        builder_start.button(text="üìï –ü–æ–º–æ—â—å", url=admin_url)

        builder_start.adjust(1, 1, 2, 2, 1)
        markup = builder_start.as_markup()

        if not user_exists(user_id):
            if referral_id and user_exists(referral_id):
                add_user(user_id, user.first_name, referral_id)
                await handle_referral_bonus(referral_id, user_id, bot)
            else:
                add_user(user_id, user.first_name, None)

        sell_count = get_total_photo_selling_count()
        withdrawn_count = get_total_withdrawn()
        await bot.send_message(user_id, "‚≠ê")
        await bot.send_photo(
            chat_id=user_id,
            photo=FSInputFile("photo/start.png"),
            caption=(
                "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é! ‚ú®</b>\n\n"
                f"üì∏ <b>–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ:</b> <code>{sell_count}</code>\n"
                f"üí∞ <b>–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ:</b> <code>{withdrawn_count}</code>\n\n"
                "<b>‚ùî –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
                "<blockquote>"
                "üîπ <i>–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ</i> ‚Äî –∑–∞ –ø—Ä–æ–¥–∞–∂—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–≤—ë–∑–¥—ã.\n"
                "üîπ <i>–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i> ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã\n"
                "üîπ <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</i> ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n"
                "</blockquote>\n"
                "üì≤ <i>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
            ),
            parse_mode='HTML',
            reply_markup=markup
        )

    except Exception as e:
        print(f"Error: {e}")
        await message.reply(
            "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.</b>\n\n<i>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</i>",
            parse_mode='HTML'
        )

@router.callback_query(F.data == "photo_selling")
async def photo_sellings(call: CallbackQuery, bot: Bot):
    user = call.from_user
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return


    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return

    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return

    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    builder_rinok = InlineKeyboardBuilder()
    builder_rinok.button(text="üåü –ö—É–ø–∏—Ç—å", callback_data="buy_photo")
    builder_rinok.button(text="üë§ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sell_photo")
    builder_rinok.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    builder_rinok.adjust(2, 1)
    markup_rinok = builder_rinok.as_markup()
    
    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile('photo/foto_rinok.png'),
        caption=(
            "<b>–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.</b>\n\n<blockquote>"
            "üì∏ <i>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>\n"
            "üë§ <i>–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i></blockquote>"
        ),
        reply_markup=markup_rinok,
        parse_mode='HTML'
    )

@router.callback_query(F.data == "buy_photo")
async def buy_photo(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    user = call.from_user
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return

    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return

    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    photos = [p for p in list_photos(only_unsold=True) if p['user_id'] != user_id]
    if not photos:
        markup_back = InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main").as_markup()
        await bot.send_message(user_id, "üì∏ <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏.</b>", parse_mode='HTML', reply_markup=markup_back)
        return
    
    random_photo = random.choice(photos)
    photo_id = random_photo['id']
    photo_user_id = random_photo['user_id']
    photo_path = random_photo['path_to_photo']
    photo_price = random_photo['price']

    original = Image.open(photo_path)
    watermarked = apply_watermark(original, text=f"@{(await bot.get_me()).username}", font_path="arial.ttf")
    buf = BytesIO()
    watermarked.save(buf, format="JPEG")
    buf.seek(0)
    data = buf.getvalue()
    input_file = BufferedInputFile(
        file=data,
        filename=f"photo_{photo_id}.jpg"
    )

    markup_photo = InlineKeyboardBuilder()
    markup_photo.button(text="üì∏ –ö—É–ø–∏—Ç—å", callback_data=f"process_buy:{photo_id}")
    markup_photo.button(text="üîÑ –°–ª–µ–¥—É—é—â–µ–µ", callback_data="buy_photo")
    markup_photo.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_photo.adjust(2, 1)
    markup_photo = markup_photo.as_markup()
    
    await bot.send_photo(
        chat_id=user_id,
        photo=input_file,
        caption=f"üì∏ <b>–§–æ—Ç–æ #{photo_id}</b>\n<i>–¶–µ–Ω–∞: {photo_price} ‚≠êÔ∏è</i>",
        parse_mode='HTML',
        reply_markup=markup_photo
    )

def delete_file(filepath):
    if os.path.exists(filepath):
        try:
            os.remove(filepath)
            print(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω: {filepath}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")

@router.callback_query(F.data.startswith("process_buy:"))
async def process_buy(call: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    photo_id = call.data.split(":")[1]
    photo = get_photo(photo_id)
    if not photo:
        await bot.answer_callback_query(call.id, "üì∏ –§–æ—Ç–æ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–æ.", show_alert=True)
        return
    
    photo_price = photo['price']
    photo_user_id = photo['user_id']
    photo_path = photo['path_to_photo']

    if user_id == photo_user_id:
        await bot.answer_callback_query(call.id, "üì∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ.", show_alert=True)
        return
    
    balance = get_balance_user(user_id)
    if balance < photo_price:
        await bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!", show_alert=True)
        return
    
    remove_stars(user_id, photo_price)
    add_stars(photo_user_id, photo_price)
    increment_count_photo_selling(photo_user_id)
    mark_photo_purchased(photo_id)


    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    markup = InlineKeyboardBuilder()
    markup.button(text="‚ù§Ô∏è‚Äçüî• –î–∞–ª–µ–µ –∫ –ø–æ–∫—É–ø–∫–∞–º!", callback_data="buy_photo")
    markup.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup.adjust(1, 1)
    markup = markup.as_markup()

    await bot.send_photo(
        chat_id=photo_user_id,
        photo=FSInputFile(photo_path),
        caption=f"<b>‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ #{photo_id} –∫—É–ø–ª–µ–Ω–æ!</b>\n<i>–¶–µ–Ω–∞: {photo_price} ‚≠êÔ∏è</i>",
        parse_mode='HTML'
    )
    
    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile(photo_path),
        caption=f"<b>‚úÖ –§–æ—Ç–æ #{photo_id} –∫—É–ø–ª–µ–Ω–æ!</b>\n<i>–¶–µ–Ω–∞: {photo_price} ‚≠êÔ∏è</i>",
        parse_mode='HTML',
        reply_markup=markup
    )

    try:
        delete_file(photo_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

def is_nude(image_path, threshold=0.25):
    banned = {
        'ANUS_EXPOSED',
        'BUTTOCKS_EXPOSED',
        'FEMALE_BREAST_EXPOSED',
        'FEMALE_GENITALIA_EXPOSED',
        'MALE_GENITALIA_EXPOSED'
    }
    result = detector.detect(image_path)
    return any(obj['class'] in banned and obj['score'] > threshold for obj in result)

@router.callback_query(F.data == "sell_photo")
async def sell_photo(call: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    user = call.from_user
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return

    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return
    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return

    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await state.set_state(SellState.PRICE_PHOTO)
    await bot.send_message(user_id, "üì∏ <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ñ–æ—Ç–æ:</b>\n<i>–ü—Ä–∏–º–µ—Ä: 2.0</i>", parse_mode='HTML')

@router.message(SellState.PRICE_PHOTO)
async def sell_photo_price(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await message.reply("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!")
        await state.clear()
        return

    text = message.text.strip().replace(",", ".")

    try:
        price = float(text)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –∏–ª–∏ 2.0")
        return

    if not (1.0 <= price <= 5.0):
        await message.reply("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1.0 –¥–æ 5.0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(price=price)
    await state.set_state(SellState.PHOTO)
    await message.answer("üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:</b>", parse_mode='HTML')


@router.message(StateFilter(SellState.PHOTO), F.content_type == "photo")
async def sell_photo_handle(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    if get_banned_user(user_id):
        await message.reply("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!")
        await state.clear()
        return

    photo = message.photo[-1]
    unique_id = photo.file_unique_id
    file_name = f"{user_id}_{unique_id}.jpg"
    file_path = PHOTOS_DIR / file_name

    if file_path.exists():
        await message.reply(
            "‚ùå –≠—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
        )
        return

    file_info: TgFile = await bot.get_file(photo.file_id)
    await bot.download_file(file_info.file_path, str(file_path))

    if is_nude(str(file_path)):
        await message.reply(f"<b>‚ùå –≠—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.</b>\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.</i>\n\n‚ÄºÔ∏è –≠—Ç–æ –Ω–µ —Ç–∞–∫? –ù–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_url}", disable_web_page_preview=True, parse_mode='HTML')
        os.remove(file_path)
        return

    data = await state.get_data()
    price = data.get("price")
    add_photo(user_id, price, str(file_path))

    for offset in range(4):
        try:
            await bot.delete_message(chat_id=user_id,
                                     message_id=message.message_id - offset)
        except TelegramBadRequest:
            continue

    markup_back = InlineKeyboardBuilder()
    markup_back.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_back.adjust(1)

    await bot.send_message(
        user_id,
        "<b>‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!</b>\n\n"
        "<i>‚ÑπÔ∏è –í–∞—Å —É–≤–µ–¥–æ–º—è—Ç –æ –ø–æ–∫—É–ø–∫–µ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.</i>",
        parse_mode='HTML',
        reply_markup=markup_back.as_markup()
    )
    await state.clear()

@router.callback_query(F.data == "stars_withdraw")
async def withdraw_start(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    user = call.from_user
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return

    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return
    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return

    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    builder = InlineKeyboardBuilder()
    buttons = [
        ('15 ‚≠êÔ∏è(üß∏)', 'withdraw:15:üß∏'),
        ('15 ‚≠êÔ∏è(üíù)', 'withdraw:15:üíù'),
        ('25 ‚≠êÔ∏è(üåπ)', 'withdraw:25:üåπ'),
        ('25 ‚≠êÔ∏è(üéÅ)', 'withdraw:25:üéÅ'),
        ('50 ‚≠êÔ∏è(üçæ)', 'withdraw:50:üçæ'),
        ('50 ‚≠êÔ∏è(üöÄ)', 'withdraw:50:üöÄ'),
        ('50 ‚≠êÔ∏è(üíê)', 'withdraw:50:üíê'),
        ('50 ‚≠êÔ∏è(üéÇ)', 'withdraw:50:üéÇ'),
        ('100 ‚≠êÔ∏è(üèÜ)', 'withdraw:100:üèÜ'),
        ('100 ‚≠êÔ∏è(üíç)', 'withdraw:100:üíç'),
        ('100 ‚≠êÔ∏è(üíé)', 'withdraw:100:üíé'),
    ]

    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)

    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    builder.adjust(2, 2, 2, 2, 2, 1, 1)
    markup = builder.as_markup()

    balance = get_balance_user(user_id)

    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile('photo/withdraw.png'),
        caption=(
            f"<b>üî∏ –£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É: {balance:.2f} ‚≠êÔ∏è</b>\n\n"
            f"üìå <b>–í–Ω–∏–º–∞–Ω–∏–µ! –£—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞:</b>\n"
            "<blockquote>"
            f"<i>üîπ –ò–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ ‚Äî <b>{stars_to_withdraw[0]}</b>\n"
            f"üî∏ –ò–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω—ã—Ö —Ñ–æ—Ç–æ ‚Äî <b>{photos_to_withdraw[0]}</b>\n"
            f"üîπ –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∏–∂–µ ‚¨áÔ∏è\n"
            f"üî∏ <a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a> | <a href='{channel_withdraw}'>–ö–∞–Ω–∞–ª –≤—ã–≤–æ–¥–∞</a> | <a href='{chater}'>–ß–∞—Ç</a></i>"
            "</blockquote>\n\n"
            f"{"üîÑ <b>–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –∞–≤—Ç–æ–≤—ã–≤–æ–¥!</b>\n\n" if check_auto(user_id) else ""}"
            "<b>–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å, –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:</b>"
        ),
        parse_mode='HTML',
        reply_markup=markup
    )

def get_gift_id_by_emoji(emoji: str) -> str | None:
    gifts = {
        "üíù": "5170145012310081615",
        "üß∏": "5170233102089322756",
        "üéÅ": "5170250947678437525",
        "üåπ": "5168103777563050263",
        "üéÇ": "5170144170496491616",
        "üéê": "5170314324215857265",
        "üöÄ": "5170564780938756245",
        "üèÜ": "5168043875654172773",
        "üíç": "5170690322832818290",
        "üíé": "5170521118301225164",
        "üçæ": "6028601630662853006"
    }
    return gifts.get(emoji)

async def get_bot_star_balance():
    url = f"https://api.telegram.org/bot{TOKEN}/getMyStarBalance"

    async with ClientSession() as session:
        async with session.get(url) as resp:
            result = await resp.json()
            return result['result']['amount']


@router.callback_query(F.data.startswith("withdraw:"))
async def withdraw_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    username = call.from_user.username
    if username is None:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username.", show_alert=True)
        return

    data = call.data.split(":")
    amount = int(data[1])
    emoji = data[2]
    
    bot_balance = await get_bot_star_balance()

    balance = get_balance_user(user_id)
    if balance < stars_to_withdraw[0]:
        await bot.answer_callback_query(call.id, f"üö´ –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî {stars_to_withdraw[0]}‚≠ê", show_alert=True)
        return

    if balance < amount:
        await bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!", show_alert=True)
        return

    photos = get_photo_sell_count(user_id)
    if photos < photos_to_withdraw[0]:
        await bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ!", show_alert=True)
        return

    try:
        for admin in admins_id:
            await bot.send_message(admin, f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | @{username}\n\n‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥: {amount}‚≠êÔ∏è\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}\nüí∏ –í—ã–≤–µ–¥–µ–Ω–æ: {get_withdrawed(user_id)}</b>", parse_mode='HTML')

        remove_stars(user_id, amount)
        add_withdrawal(user_id, amount)

        if check_auto(user_id) and bot_balance >= amount:
            id_gift = get_gift_id_by_emoji(emoji)
            if id_gift is not None:
                await bot.send_gift(user_id, id_gift, text="üéÅ –£—Å–ø–µ—à–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞")
            
            await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>–∑–≤—ë–∑–¥</b> –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!",parse_mode='HTML')
            await bot.send_message(chahnel_withdraw_id, f"[üü¢ <b>–ê–í–¢–û–í–´–í–û–î</b>]\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\nüí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount}</code>‚≠êÔ∏è [{emoji}]\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéÅ</b>", parse_mode='HTML')
            return
        elif check_auto(user_id) and bot_balance < amount:
            await bot.send_message(user_id, f"‚ùå –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ-–≤—ã–ø–ª–∞—Ç—ã!\n<i>–ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–∞—Å –Ω–∞ —Ä—É—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...</i>", parse_mode='HTML')
        success, id_v = add_withdrawale(username, user_id, amount)
        status = get_status_withdrawal(user_id)
        pizda = await bot.send_message(
                    chahnel_withdraw_id,
                    f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\n"
                    f"üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount}</code>‚≠êÔ∏è [{emoji}]\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>",
                    disable_web_page_preview=True,
                    parse_mode='HTML'
                )
        builder_channel = InlineKeyboardBuilder()
        builder_channel.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"paid:{id_v}:{pizda.message_id}:{user_id}:{username}:{amount}:{emoji}")
        builder_channel.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"denied:{id_v}:{pizda.message_id}:{user_id}:{username}:{amount}:{emoji}")
        builder_channel.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={user_id}")
        markup_channel = builder_channel.adjust(2, 1).as_markup()
        await bot.edit_message_text(
                    chat_id=pizda.chat.id,
                    message_id=pizda.message_id,
                    text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\n"
                         f"üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount}</code>‚≠êÔ∏è [{emoji}]\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>",
                    parse_mode='HTML',
                    reply_markup=markup_channel,
                    disable_web_page_preview=True
                )
        await bot.answer_callback_query(call.id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚≠êÔ∏è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)

    except Exception as e:
        print("error withdraw: ", e)
        await bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥.", show_alert=True)

@router.callback_query(F.data.startswith("denied"))
async def denied_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id in admins_id:
        data = call.data.split(":")
        # print(data)
        id_v, mesag_id, us_id, us_name, strs, emoji = map(str, data[1:7])

        reason_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ù–∞–∫—Ä—É—Ç–∫–∞", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:narkutka")],
            [InlineKeyboardButton(text="üé´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:usloviya")],
            [InlineKeyboardButton(text="‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:black_list")],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ë–∞–≥–∞—é–∑", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:bagous")]
        ])

        text = (
            f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\n"
            f"üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{strs}</code>‚≠êÔ∏è [{emoji}]\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–∫–∞–∑–∞–Ω–æ üö´</b>\n\n"
            f"<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | "
            f"<b><a href='{chater}'>–ß–∞—Ç</a></b> | "
            f"<b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>"
        )

        await safe_edit_message(bot, chahnel_withdraw_id, int(mesag_id), text, reason_markup)
    else:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@router.callback_query(F.data.startswith("balk"))
async def denied_reason_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id in admins_id:
        data = call.data.split(":")
        id_v, mesag_id, us_id, us_name, strs, emoji, reason = map(str, data[1:8])

        reasons = {
            "narkutka": "üé∞ –ù–∞–∫—Ä—É—Ç–∫–∞",
            "usloviya": "üé´ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç",
            "black_list": "‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
            "bagous": "‚ö†Ô∏è –ë–∞–≥–∞—é–∑"
        }

        reason_text = reasons.get(reason, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")

        text = (
            f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\n"
            f"üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{strs}</code>‚≠êÔ∏è [{emoji}]\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–∫–∞–∑–∞–Ω–æ üö´</b>\n"
            f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞: <b>{reason_text}</b> \u200B\n\n"
            f"<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | "
            f"<b><a href='{chater}'>–ß–∞—Ç</a></b> | "
            f"<b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>"
        )

        await safe_edit_message(bot, chahnel_withdraw_id, int(mesag_id), text, None)
    else:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
@router.callback_query(F.data.startswith("paid"))
async def paid_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id in admins_id:
        data = call.data.split(":")
        id_v = int(data[1])
        message_id = int(data[2])
        user_id = int(data[3])
        username = data[4]
        stars = int(data[5])
        emoji = data[6]
        try:
            update_status_withdrawal(id_v, "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéÅ")
            await bot.send_message(user_id, text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>–∑–≤—ë–∑–¥</b> –ø–æ–¥—Ç–≤–µ—Ä–¥–∂–¥–µ–Ω–∞!",parse_mode='HTML')
            await call.message.edit_text(
                text=(
                    f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID: {user_id}\n"
                    f"üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{stars}</code>‚≠êÔ∏è [{emoji}]\n\n"
                    "üîÑ –°—Ç–∞—Ç—É—Å: <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéÅ</b>\n\n"
                    f"<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | "
                    f"<b><a href='{chater}'>–ß–∞—Ç</a></b> | "
                    f"<b><a href='https://t.me/{(await bot.me()).username}'>–ë–æ—Ç</a></b>"
                ),
                parse_mode='HTML',
                disable_web_page_preview=True
            )

        except Exception as e:
            print(f"error paid: {e}")
    else:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", show_alert=True)
        return

@router.message(F.text == '/adminpanel')
async def adminpanel_command(message: Message, bot: Bot):
    if message.from_user.id in admins_id:
        count_users = get_count_users()
        admin_builder = InlineKeyboardBuilder()
        admin_builder.button(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='change_config')
        admin_builder.button(text="üéÅ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞", callback_data='more_balance')
        admin_builder.button(text="üìÑ –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–≤—ã–≤–æ–¥", callback_data='add_auto')
        admin_builder.button(text='üìã –°–ø–∏—Å–æ–∫ –≤ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–µ', callback_data='info_auto')
        admin_builder.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞', callback_data='remove_auto')
        admin_builder.button(text='üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='add_promo_code')
        admin_builder.button(text='üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data='info_promo_codes')
        admin_builder.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='remove_promo_code')
        admin_builder.button(text='üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', callback_data='users_check')
        admin_builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –û–ü', callback_data='add_op')
        admin_builder.button(text='üìÑ –°–ø–∏—Å–æ–∫ –û–ü', callback_data='list_op')
        admin_builder.button(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –û–ü', callback_data='delete_op')
        admin_builder.button(text='üì§ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing')
        panel_admin = admin_builder.adjust(1, 1, 3, 3, 1, 3, 1).as_markup()
        await bot.send_message(message.from_user.id, f"<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}", parse_mode='HTML', reply_markup=panel_admin)
    else:
        await bot.send_message(message.from_user.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode='HTML')

@router.callback_query(F.data == "more_balance")
async def deposit(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "‚≠êÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞: ")
    await state.set_state(AdminState.DEPOSIT)

@router.message(AdminState.DEPOSIT)
async def depka(message: Message, state: FSMContext, bot: Bot):
    try:
        count_stars = int(message.text)
        if count_stars <= 0:
            raise ValueError

        await state.clear()

        prices = [LabeledPrice(label="XTR", amount=count_stars)]

        builder = InlineKeyboardBuilder()
        builder.button(text=f"‚≠êÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å {count_stars}", pay=True)

        await bot.send_invoice(
            chat_id=message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤—ë–∑–¥ ‚≠êÔ∏è",
            description=f"–í—ã –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ {count_stars}‚≠êÔ∏è",
            payload=f"deposit:{count_stars}",
            provider_token="",
            currency="XTR",
            prices=prices,
            reply_markup=builder.as_markup()
        )

    except ValueError:
        await bot.send_message(message.from_user.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è!")

@router.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.successful_payment)
async def on_success(message: Message, bot: Bot):
    payload = message.successful_payment.invoice_payload
    if payload.startswith("deposit:"):
        stars = int(payload.split(":")[1])
        await bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {stars}‚≠êÔ∏è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")

@router.callback_query(F.data.endswith("_auto"))
async def auto(call: CallbackQuery, bot: Bot, state: FSMContext):
    call_data = call.data.split("_")[0]
    user_id = call.from_user.id
    if call_data == "add":
        await bot.send_message(user_id, "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        await state.set_state(AdminState.ADD_AUTO)
    elif call_data == "info":
        list_users = get_auto_withdrawals()

        text = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∞–≤—Ç–æ–≤—ã–≤–æ–¥:\n\n"
        for index, user in enumerate(list_users):
            text += f"{index + 1}. {user}\n"

        await bot.send_message(user_id, text=text)
    elif call_data == "remove":
        await bot.send_message(user_id, "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        await state.set_state(AdminState.REMOVE_AUTO)

@router.message(AdminState.ADD_AUTO)
async def add_auto(message: Message, state: FSMContext, bot: Bot):
    user_id = message.text
    add_to_auto_withdrawals(user_id)
    await bot.send_message(message.from_user.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–≤—Ç–æ–≤—ã–≤–æ–¥!")
    await bot.send_message(int(user_id), "<b>‚úÖ –í—ã –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>", parse_mode='HTML')
    await bot.send_gift()
    await state.clear()

@router.message(AdminState.REMOVE_AUTO)
async def remove_auto(message: Message, state: FSMContext, bot: Bot):
    user_id = message.text
    remove_from_auto_withdrawals(user_id)
    await bot.send_message(message.from_user.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞!")
    await bot.send_message(int(user_id), "‚ùå <b>–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>", parse_mode='HTML')
    await state.clear()            

@router.callback_query(F.data == "delete_op")
async def delete_op(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(AdminState.REMOVE_OP)

@router.message(AdminState.REMOVE_OP)
async def delete_op_message(message: Message, state: FSMContext, bot: Bot):
    channel = message.text
    try:
        delete_channel(channel)
    except:
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞!")
    await bot.send_message(message.from_user.id, "‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await state.clear()

@router.callback_query(F.data == 'list_op')
async def list_op(call: CallbackQuery, bot: Bot):
    channels = get_channels_ids()

    if not channels:
        text = "<b>üéâ –°–ø–∏—Å–æ–∫ –û–ü:</b>\n\n<b>–ü—É—Å—Ç–æ</b>"
    else:
        text = "<b>üéâ –°–ø–∏—Å–æ–∫ –û–ü:</b>\n\n"
        for index, channel_id in enumerate(channels):
            text += f"{index + 1}. <code>{int(channel_id)}</code>\n"

    await bot.send_message(call.from_user.id, text, parse_mode='HTML')

@router.callback_query(F.data == "add_op")
async def add_op_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(AdminState.ADD_OP)

async def is_bot_admin_in_channel(bot: Bot, channel_id: str) -> tuple[bool, str | None]:
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=bot.id)
        if isinstance(member, ChatMemberAdministrator):
            return True, None
        else:
            return False, "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ."

    except TelegramForbiddenError:
        return False, "üö´ –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω—ë–º."
    except TelegramBadRequest as e:
        return False, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e.message}"

async def create_invite_link(bot: Bot, channel_id: str, link_name: str) -> str | None:
    try:
        invite_link: ChatInviteLink = await bot.create_chat_invite_link(
            chat_id=channel_id,
            name=link_name,
            creates_join_request=False,
            expire_date=None,
            member_limit=None
        )
        return invite_link.invite_link

    except TelegramForbiddenError:
        print("üö´ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
        return None
    except TelegramBadRequest as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e.message}")
        return None

@router.message(AdminState.ADD_OP)
async def add_op_message(message: Message, state: FSMContext, bot: Bot):
    channel = message.text.strip()

    if not channel.startswith("-100"):
        await bot.send_message(message.from_user.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100).")
        return
    
    is_admin, error_msg = await is_bot_admin_in_channel(bot, channel)

    if not is_admin:
        await bot.send_message(message.from_user.id, error_msg)
        return

    link = await create_invite_link(bot, channel, "OP_LINK")
    if link:
        add_channel(channel, link)
        await bot.send_message(message.from_user.id, "‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await bot.send_message(message.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É.")
    await state.clear()

@router.callback_query(F.data == "users_check")
async def users_check_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminState.USERS_CHECK)
    
@router.message(AdminState.USERS_CHECK)
async def users_check_message(message: Message, state: FSMContext, bot: Bot):
    user_id = int(message.text)
    log = get_user_log_html(user_id)
    markup = InlineKeyboardBuilder()
    markup.button(text="‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user:{user_id}")
    markup.button(text="üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_user:{user_id}")
    markup.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="adminpanel")
    await bot.send_message(message.from_user.id, log, parse_mode='HTML', reply_markup=markup.adjust(1,1,1).as_markup())
    await state.clear()

@router.callback_query(F.data.startswith('block_user:'))
async def block_user_callback(call: CallbackQuery, bot: Bot):
    try:
        user_id = int(call.data.split(":")[1])
        banned = get_banned_user(user_id)
        if banned == 1:
            await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
            return
        set_banned_user(user_id, 1)
        await bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    except ValueError:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)

@router.callback_query(F.data.startswith('unblock_user:'))
async def unblock_user_callback(call: CallbackQuery, bot: Bot):
    try:
        user_id = int(call.data.split(":")[1])
        banned = get_banned_user(user_id)
        if banned == 0:
            await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
            return
        set_banned_user(user_id, 0)
        await bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    except ValueError:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)

@router.callback_query(F.data == "adminpanel")
async def adminpanel_callback(call: CallbackQuery, bot: Bot):
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if call.from_user.id in admins_id:
        count_users = get_count_users()
        admin_builder = InlineKeyboardBuilder()
        admin_builder.button(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='change_config')
        admin_builder.button(text="üéÅ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞", callback_data='more_balance')
        admin_builder.button(text="üìÑ –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–≤—ã–≤–æ–¥", callback_data='add_auto')
        admin_builder.button(text='üìã –°–ø–∏—Å–æ–∫ –≤ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–µ', callback_data='info_auto')
        admin_builder.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞', callback_data='remove_auto')
        admin_builder.button(text='üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='add_promo_code')
        admin_builder.button(text='üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data='info_promo_codes')
        admin_builder.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='remove_promo_code')
        admin_builder.button(text='üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', callback_data='users_check')
        admin_builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –û–ü', callback_data='add_op')
        admin_builder.button(text='üìÑ –°–ø–∏—Å–æ–∫ –û–ü', callback_data='list_op')
        admin_builder.button(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –û–ü', callback_data='delete_op')
        admin_builder.button(text='üì§ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing')
        panel_admin = admin_builder.adjust(1, 1, 3, 3, 1, 3, 1).as_markup()
        await bot.send_message(call.from_user.id, f"<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}", parse_mode='HTML', reply_markup=panel_admin)
    else:
        await bot.send_message(call.from_user.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode='HTML')


@router.callback_query(F.data == "change_config")
async def config_changer(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    subgram_st = "‚úÖ" if subgram_status[0] == True else "‚ùå"
    flyer_st = "‚úÖ" if flyer_status[0] == True else "‚ùå"
    builder_config = InlineKeyboardBuilder()

    builder_config.button(text=f"‚ÑπÔ∏è Subgram [{subgram_st}]", callback_data="config_subgram")
    builder_config.button(text=f"üéâ Flyer [{flyer_st}]", callback_data="config_flyer")
    builder_config.button(text="üéÅ –ù–∞–≥—Ä–∞–¥—ã", callback_data="config_awards")
    builder_config.button(text="üîÑ –í—ã–≤–æ–¥", callback_data="config_withdraw")
    builder_config.button(text="üé∞ –ú–∏–Ω–∏-–ò–≥—Ä—ã", callback_data="config_games")
    builder_config.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanel")
    
    markup_config = builder_config.adjust(2, 2, 1, 1).as_markup()
    
    await bot.send_message(
        call.message.chat.id,
        "<b>üõ†Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        parse_mode="HTML",
        reply_markup=markup_config
    )

@router.callback_query(F.data == "config_games")
async def change_games(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    message_id = call.message.message_id

    try:
        await bot.delete_message(chat_id=user_id, message_id=message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    builder = InlineKeyboardBuilder()

    builder.button(text="üé∞ –°–ª–æ—Ç—ã", callback_data="config_game:slots")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanel")
    markup = builder.adjust(1).as_markup()

    await bot.send_message(
        chat_id=user_id,
        text="‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

async def show_slots_config(call_or_msg: Message | CallbackQuery, bot: Bot):
    if isinstance(call_or_msg, Message):
        user_id = call_or_msg.from_user.id
    else:
        user_id = call_or_msg.from_user.id
        try:
            await bot.delete_message(chat_id=user_id, message_id=call_or_msg.message.message_id)
        except Exception as e:
            print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    builder = InlineKeyboardBuilder()

    builder.button(
        text=f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∞: {mini_games[0]} ‚≠ê",
        callback_data="edit_spin_cost"
    )
    slot_emojis = {
        1: "üíéüíéüíé",
        22: "üçãüçãüçã",
        43: "üîîüîîüîî",
        64: "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£"
    }


    for value, reward in reward_games["slots"]["reward_table"].items():
        symbol = slot_emojis.get(value, f"{value}")
        builder.button(
            text=f"üé≤ –í—ã–ø–∞–ª–æ {symbol} ‚ûù {reward} ‚≠ê",
            callback_data=f"edit_slot_reward:{value}"
        )


    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="config_games")

    markup = builder.adjust(1).as_markup()

    await bot.send_message(
        chat_id=user_id,
        text="üé∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã: –°–ª–æ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=markup
    )

@router.callback_query(F.data == "edit_spin_cost")
async def edit_spin_cost(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö:")
    await state.set_state(AdminState.EDIT_SPIN_COST)

@router.message(AdminState.EDIT_SPIN_COST)
async def save_spin_cost(message: Message, state: FSMContext, bot: Bot):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ):")

    mini_games[0] = int(text)
    await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {mini_games[0]} ‚≠êÔ∏è")

    await state.clear()
    await show_slots_config(message, bot)

@router.callback_query(F.data.startswith("edit_slot_reward:"))
async def edit_slot_reward(call: CallbackQuery, bot: Bot, state: FSMContext):
    value = int(call.data.split(":")[1])
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(
        call.from_user.id,
        f"üé≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –≤—ã–ø–∞–¥–µ–Ω–∏—è {value}:"
    )
    await state.set_state(AdminState.EDIT_SLOT_REWARD)
    await state.update_data(editing_value=value)

@router.message(AdminState.EDIT_SLOT_REWARD)
async def save_slot_reward(message: Message, state: FSMContext, bot: Bot):
    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ):")
        return

    data = await state.get_data()
    value = data.get("editing_value")

    reward_games["slots"]["reward_table"][value] = int(text)
    await message.answer(f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è {value} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {int(text)} ‚≠êÔ∏è")

    await state.clear()
    await show_slots_config(message, bot)

@router.callback_query(F.data.startswith("config_game:"))
async def open_game_config(call: CallbackQuery, bot: Bot):
    game_name = call.data.split(":")[1]
    if game_name == "slots":
        await show_slots_config(call, bot)

@router.callback_query(F.data == "config_flyer")
async def change_flyer(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    message_id = call.message.message_id

    try:
        await bot.delete_message(chat_id=user_id, message_id=message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    flyer_status[0] = not flyer_status[0]
    status_text = "–≤–∫–ª—é—á—ë–Ω ‚úÖ" if flyer_status[0] else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"

    builder = InlineKeyboardBuilder()

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="change_config")

    markup = builder.adjust(1).as_markup()

    await bot.send_message(
        user_id,
        f"üîÅ Flyer —Ç–µ–ø–µ—Ä—å {status_text}!",
        reply_markup=markup
    )

@router.callback_query(F.data == "config_subgram")
async def change_subgram(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    message_id = call.message.message_id

    try:
        await bot.delete_message(chat_id=user_id, message_id=message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    subgram_status[0] = not subgram_status[0]
    status_text = "–≤–∫–ª—é—á—ë–Ω ‚úÖ" if subgram_status[0] else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"

    builder = InlineKeyboardBuilder()

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="change_config")

    markup = builder.adjust(1).as_markup()


    await bot.send_message(
        user_id,
        f"üîÅ Subgram —Ç–µ–ø–µ—Ä—å {status_text}!",
        reply_markup=markup
    )


@router.callback_query(F.data == "config_withdraw")
async def change_withdraw(call: CallbackQuery, bot: Bot, state: FSMContext):
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await state.set_state(AdminState.WITHDRAW)
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n(–ü—Ä–∏–º–µ—Ä: 5:10)")

@router.message(AdminState.WITHDRAW)
async def change_withdraw(message: Message, bot: Bot, state: FSMContext):
    try:
        stars, photo = message.text.split(':')
        stars = int(stars)
        photo = int(photo)
        stars_to_withdraw[0] = stars
        photos_to_withdraw[0] = photo
        await bot.send_message(message.from_user.id, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        await state.clear()
    except Exception as e:
        print(f"error change_withdraw: {e}")

@router.callback_query(F.data == "config_awards")
async def change_awards(call: CallbackQuery, bot: Bot, state: FSMContext):
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await state.set_state(AdminState.AWARDS)
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:")

@router.message(AdminState.AWARDS)
async def change_awards(message: Message, bot: Bot, state: FSMContext):
    try:
        stars = int(message.text)
        stars_reffer[0] = stars
        await bot.send_message(message.from_user.id, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        await state.clear()
    except Exception as e:
        print(f"error change_awards: {e}")

@router.callback_query(F.data == "info_promo_codes")
async def info_promo_codes_callback(call: CallbackQuery, bot: Bot):

    promocodes = get_all_promocodes()

    text = "<b>üéüÔ∏è –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"

    for promo in promocodes:
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if promo['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        text += (f"<b>ID:</b> {promo['id']}\n"
                 f"<b>–ö–æ–¥:</b> {promo['code']}\n"
                 f"<b>–ó–≤—ë–∑–¥—ã:</b> {promo['stars']}\n"
                 f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {promo['current_uses']} –∏–∑ {promo['max_uses']}\n"
                 f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n")

    if not promocodes:
        text += "<b>–ü—É—Å—Ç–æ</b>\n"

    await bot.send_message(call.message.chat.id, text, parse_mode='HTML')

@router.callback_query(F.data == "add_promo_code")
async def admin_add_promo_code_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:–Ω–∞–≥—Ä–∞–¥–∞:–º–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
    await state.set_state(AdminState.ADD_PROMO_CODE)

@router.message(AdminState.ADD_PROMO_CODE)
async def add_promo_code_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        promocode, stars_str, max_uses_str = message.text.split(":")
        stars = int(stars_str)
        max_uses = int(max_uses_str)
        add_promocode(promocode, stars, max_uses)
        await message.reply(f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        await message.reply("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:–Ω–∞–≥—Ä–∞–¥–∞:–º–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—á–∏—Å–ª–∞).</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode='HTML')
    finally:
        await state.clear()

@router.callback_query(F.data == "remove_promo_code")
async def admin_remove_promo_code_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(AdminState.REMOVE_PROMO_CODE)

@router.message(AdminState.REMOVE_PROMO_CODE)
async def delete_promo_code_handler(message: Message, state: FSMContext, bot: Bot):
    promocode = message.text
    try:
        delete_promocode(promocode)
        await message.reply(f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode='HTML')
    finally:
        await state.clear()


@router.callback_query(F.data == "mailing")
async def admin_mailing_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n(<i>–î–ª—è –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: {–Ω–∞–∑–≤–∞–Ω–∏–µ–∫–Ω–æ–ø–∫–∏}:url</i>)", parse_mode='HTML')
    await state.set_state(AdminState.MAILING)

async def send_message_with_retry(
    bot: Bot,
    chat_id: int,
    text: str,
    parse_mode=None,
    reply_markup=None,
    photo_file_id: Optional[str] = None,
    attempt: int = 0
):
    try:
        if photo_file_id:
            await bot.send_photo(
                chat_id,
                photo=photo_file_id,
                caption=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        else:
            await bot.send_message(
                chat_id,
                text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        return True
    except (TelegramForbiddenError, TelegramNotFound) as e:
        logging.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {chat_id}. –ü—Ä–∏—á–∏–Ω–∞: {e}")
        return False
    except TelegramMigrateToChat as e:
        logging.info(f"–ß–∞—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω. –ù–æ–≤—ã–π ID: {e.migrate_to_chat_id}")
        return await send_message_with_retry(
            bot, e.migrate_to_chat_id, text, parse_mode, reply_markup, photo_file_id, attempt + 1
        )
    except TelegramRetryAfter as e:
        logging.warning(f"–û–∂–∏–¥–∞–µ–º {e.retry_after} —Å–µ–∫. –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤.")
        await asyncio.sleep(e.retry_after)
        return await send_message_with_retry(
            bot, chat_id, text, parse_mode, reply_markup, photo_file_id, attempt + 1
        )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False


async def update_progress(
    progress_message: types.Message,
    current: int,
    total_users: int,
    success: int,
    semaphore_value: int,
    speed_stats: dict
):
    percent = (current / total_users) * 100
    filled = int(percent / 10)
    progress_bar = 'üü©' * filled + '‚¨úÔ∏è' * (10 - filled)
    
    current_speed = speed_stats["current_speed"]
    avg_speed = speed_stats["avg_speed"]
    
    try:
        await progress_message.edit_text(
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {percent:.1f}%\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current}/{total_users}\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {semaphore_value}\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {current_speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫ ({current_speed*60:.1f} —Å–æ–æ–±—â/–º–∏–Ω)\n"
            f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫ ({avg_speed*60:.1f} —Å–æ–æ–±—â/–º–∏–Ω)"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


async def broadcast(
    bot: Bot,
    start_msg: types.Message,
    users: List[Tuple[int]],
    text: str,
    photo_file_id: str = None,
    keyboard=None,
    max_concurrent: int = 25
):
    total_users = len(users)
    if not total_users:
        await start_msg.reply("<b>‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>", parse_mode="HTML")
        return

    progress_message = await start_msg.reply(
        "<b>üì¢ –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        "–ü—Ä–æ–≥—Ä–µ—Å—Å: <code>üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú</code> <b>0%</b>\n"
        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>0</b>/<b>{}</b>\n"
        "‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>0</b>\n"
        "‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: <b>0</b>\n"
        "üìä –°–∫–æ—Ä–æ—Å—Ç—å: <b>0.0</b> —Å–æ–æ–±—â/—Å–µ–∫ (<b>0.0</b> —Å–æ–æ–±—â/–º–∏–Ω)\n"
        "üìâ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: <b>0.0</b> —Å–æ–æ–±—â/—Å–µ–∫ (<b>0.0</b> —Å–æ–æ–±—â/–º–∏–Ω)".format(total_users),
        parse_mode="HTML"
    )

    semaphore = asyncio.Semaphore(max_concurrent)
    progress_lock = asyncio.Lock()
    
    processed = 0
    success = 0
    tasks = []

    start_time = time.time()
    message_timestamps = deque(maxlen=100)
    speed_stats = {
        "current_speed": 0.0,
        "avg_speed": 0.0, 
        "last_update": start_time  
    }

    def calculate_speed():
        now = time.time()

        if len(message_timestamps) >= 2:
            time_span = message_timestamps[-1] - message_timestamps[0]
            if time_span > 0:
                current_speed = (len(message_timestamps) - 1) / time_span
            else:
                current_speed = 0
        else:
            current_speed = 0

        elapsed = now - start_time
        if elapsed > 0 and processed > 0:
            avg_speed = processed / elapsed
        else:
            avg_speed = 0
            
        return {
            "current_speed": current_speed,
            "avg_speed": avg_speed,
            "last_update": now
        }

    async def process_user(user_id):
        nonlocal processed, success
        
        async with semaphore:
            result = await send_message_with_retry(
                bot, user_id, text, "HTML", keyboard, photo_file_id
            )

            async with progress_lock:
                processed += 1
                if result:
                    success += 1
                
                message_timestamps.append(time.time())
                
                now = time.time()
                if (now - speed_stats["last_update"] > 2 or processed % 50 == 0):
                    speed_stats.update(calculate_speed())

                progress_percentage = processed / total_users * 100
                progress_blocks = int(progress_percentage // 10)
                progress_bar = "üü©" * progress_blocks + "‚¨ú" * (10 - progress_blocks)

                if processed % max(1, total_users//20) == 0 or processed == total_users:
                    active_tasks = len(tasks) - sum(task.done() for task in tasks)
                    await progress_message.edit_text(
                        "<b>üì¢ –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                        f"<b>üìç –ü—Ä–æ–≥—Ä–µ—Å—Å:</b> <code>{progress_bar}</code> <b>{progress_percentage:.1f}%</b>\n"
                        f"<b>üìå –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> <b>{processed}</b>/<b>{total_users}</b>\n"
                        f"<blockquote>‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success}</b>\n"
                        f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: <b>{active_tasks}</b>\n"
                        f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: <b>{speed_stats['current_speed']:.1f}</b> —Å–æ–æ–±—â/—Å–µ–∫ "
                        f"(<b>{speed_stats['current_speed']*60:.1f}</b> —Å–æ–æ–±—â/–º–∏–Ω)\n"
                        f"üìâ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: <b>{speed_stats['avg_speed']:.1f}</b> —Å–æ–æ–±—â/—Å–µ–∫ "
                        f"(<b>{speed_stats['avg_speed']*60:.1f}</b> —Å–æ–æ–±—â/–º–∏–Ω)</blockquote>",
                        parse_mode="HTML"
                    )

    for user_id in users:
        user_id = int(user_id)
        task = asyncio.create_task(process_user(user_id))
        tasks.append(task)

    await asyncio.gather(*tasks)

    elapsed_time = time.time() - start_time
    final_speed = processed / elapsed_time if elapsed_time > 0 else 0
    
    await progress_message.edit_text(
        "<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì® –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success}</b>/<b>{total_users}</b> "
        f"(<b>{success/total_users*100:.1f}%</b>)\n"
        f"‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{elapsed_time:.1f}</b> —Å–µ–∫\n"
        f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: <b>{final_speed:.1f}</b> —Å–æ–æ–±—â/—Å–µ–∫ "
        f"(<b>{final_speed*60:.1f}</b> —Å–æ–æ–±—â/–º–∏–Ω)",
        parse_mode="HTML"
    )

    logging.info(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success}/{total_users} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {elapsed_time:.1f} —Å–µ–∫. "
        f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {final_speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫"
    )



@router.message(AdminState.MAILING)
async def mailing_handler(message: types.Message, state: FSMContext):
    if message.photo:
        text = message.caption or ""
        entities = message.caption_entities or []
        photo_file_id = message.photo[-1].file_id
    else:
        text = message.text or ""
        entities = message.entities or []
        photo_file_id = None
    users = get_users_ids()

    buttons = re.findall(r"\{([^{}]+)\}:([^{}]+)", text)
    keyboard = None
    if buttons:
        kb = InlineKeyboardBuilder()
        for btn_text, btn_url in buttons:
            kb.button(text=btn_text.strip(), url=btn_url.strip())
        kb.adjust(1)
        keyboard = kb.as_markup()
        text = re.sub(r"\{[^{}]+\}:([^{}]+)", "", text).strip()

    formatted_text = apply_html_formatting(text, entities)

    logging.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    await broadcast(
        message.bot, message, users, formatted_text, photo_file_id, keyboard
    )
    await state.clear()


def apply_html_formatting(text, entities):
    return html_detect.unparse(text, entities)


@router.callback_query(F.data == "profile")
async def profile_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    user = call.from_user
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return

    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return
    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    builder_profile = InlineKeyboardBuilder()
    builder_profile.button(text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")
    builder_profile.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_profile = builder_profile.adjust(1).as_markup()

    nickname = call.from_user.first_name
    balance = get_balance_user(user_id)
    count_photos = get_photo_sell_count(user_id)
    ref_count = get_referral_count(user_id)
    withdrawed = get_withdrawed(user_id)

    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile("photo/profile.png"),
        caption=(
            "<b>‚ú® –ü—Ä–æ—Ñ–∏–ª—å\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üë§ –ò–º—è: {nickname}\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å:</b> {balance:.2f} ‚≠êÔ∏è\n"
            f"<b>üì∏ –ü—Ä–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ:</b> {count_photos}\n"
            "<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {ref_count}\n"
            f"üí∏ <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> {int(withdrawed)} ‚≠êÔ∏è\n"
            "<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            "‚¨áÔ∏è <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.</i>"
        ),
        parse_mode='HTML',
        reply_markup=markup_profile
    )

@router.callback_query(F.data == "top")
async def top_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    user = call.from_user
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return
    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    builder_top = InlineKeyboardBuilder()
    builder_top.button(text="üèÜ –¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="top_week")
    builder_top.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_top = builder_top.adjust(1).as_markup()

    top_list = get_today_withdraw_top()

    text = "<b>‚ú® –¢–æ–ø –≤—ã–≤–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å\n"

    for i, (username, count) in enumerate(top_list):
        text += f"{i + 1}. @{username} - {count} ‚≠ê\n"

    text += "</b>\n‚¨áÔ∏è <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.</i>"

    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile("photo/top.png"),
        caption=text,
        parse_mode='HTML',
        reply_markup=markup_top
    )

@router.callback_query(F.data == "top_week")
async def top_week_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    user = call.from_user
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return
    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    top_list = get_week_withdraw_top()

    text = "<b>‚ú® –¢–æ–ø –≤—ã–≤–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é\n"

    for i, (username, count) in enumerate(top_list):
        text += f"{i + 1}. @{username} - {count} ‚≠ê\n"

    text += "</b>\n‚¨áÔ∏è <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.</i>"

    builder_top = InlineKeyboardBuilder()
    builder_top.button(text="üèÜ –¢–æ–ø –∑–∞ –¥–µ–Ω—å", callback_data="top")
    builder_top.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_top = builder_top.adjust(1).as_markup()

    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile("photo/top.png"),
        caption=text,
        parse_mode='HTML',
        reply_markup=markup_top
    )

@router.callback_query(F.data == "promocode")
async def promocode_callback_query(call: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    await bot.delete_message(call.from_user.id, call.message.message_id)
    input_photo_promo = FSInputFile("photo/promocode.png")
    await bot.send_photo(call.from_user.id, photo=input_photo_promo, caption=f"‚ú® –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:\n*<i>–ù–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –≤ <a href='{channel_osn}'>–∫–∞–Ω–∞–ª–µ</a> –∏ <a href='{chater}'>—á–∞—Ç–µ</a></i>", parse_mode='HTML')
    await state.set_state(AdminState.PROMOCODE_INPUT)

@router.message(AdminState.PROMOCODE_INPUT)
async def promocode_handler(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    markup_back_inline = InlineKeyboardBuilder()
    markup_back_inline.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_back = markup_back_inline.as_markup()

    promocode_text = message.text
    try:
        success, result = use_promocode(promocode_text, message.from_user.id)
        if success:
            await message.reply(f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {result} ‚≠êÔ∏è</b>", parse_mode='HTML', reply_markup=markup_back)
            await send_main_menu(user_id, bot, message)
        else:
            await message.reply(f"<b>‚ùå –û—à–∏–±–∫–∞: {result}</b>", parse_mode='HTML')
            await send_main_menu(user_id, bot, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode='HTML')
        await send_main_menu(user_id, bot, message)
    finally:
        await state.clear()

@router.callback_query(F.data == "games")
async def games_callback_query(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await send_games_menu(user_id, bot)

@router.callback_query(F.data == "slots_game")
async def slots_game(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)

    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await send_slots_menu(user_id, bot)

@router.callback_query(F.data == "slots_info")
async def slots_info(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)

    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="slots_game")

    markup = builder.adjust(1).as_markup()
    
    try:
        await bot.edit_message_caption(
            chat_id=user_id,
            message_id=call.message.message_id,
            caption = (
                "‚ÑπÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: üé∞ <b>–°–ª–æ—Ç—ã</b>\n\n"
                "üéØ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n"
                "<blockquote>"
                "<b>–ö—Ä—É—Ç–∏ —Å–ª–æ—Ç—ã</b> –∏ –ø–æ–ª—É—á–∞–π ‚≠êÔ∏è –∑–∞ —É–¥–∞—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏!\n\n"
                "üí• –í—ã–ø–∞–ª–æ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö ‚Äî <b>–ø–æ–ª—É—á–∞–µ—à—å –∑–≤—ë–∑–¥—ã</b>\n"
                "üéÅ –ß–µ–º —Ä–µ–¥—á–µ —Å–∏–º–≤–æ–ª—ã ‚Äî —Ç–µ–º <b>–±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞</b>\n"
                "üò¢ –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ‚Äî –±–µ–∑ –ø—Ä–∏–∑–∞</blockquote>\n\n"
                f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∞: <b>{mini_games[0]} ‚≠êÔ∏è</b>\n"
                "<i>–ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É? –ö—Ä—É—Ç–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π!</i>"
            ),
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_slot_reward(value: int) -> int:
    config = reward_games.get("slots", {})
    reward_table = config.get("reward_table", {})
    return reward_table.get(value, config.get("default_reward", 0))

def get_combo_text(dice_value: int) -> list[str]:
    symbols = ["BAR", "üçá", "üçã", "7Ô∏è‚É£"]
    dice_value -= 1
    result = []

    for _ in range(3):
        result.append(symbols[dice_value % 4])
        dice_value //= 4

    return result[::-1]


@router.callback_query(F.data == "spin_slot")
async def spin_slot(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)

    if not mini_games:
        await bot.answer_callback_query(call.id, "üö´ –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏-–∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)
        return
    
    stars_to_play = mini_games[0]


    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    if get_balance_user(user_id) < stars_to_play:
        await bot.answer_callback_query(call.id, "üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!", show_alert=True)
        return
    
    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    dice_msg: Message = await bot.send_dice(call.from_user.id, emoji="üé∞")

    value = dice_msg.dice.value
    # print("[debug] –í—ã–ø–∞–ª–æ: ", value)
    slot_text = slot_text = " | ".join(get_combo_text(value))
    reward = get_slot_reward(value)
    # print("[debug] –ù–∞–≥—Ä–∞–¥–∞: ", reward)

    await asyncio.sleep(2)
    builder = InlineKeyboardBuilder()

    buttons = [
        ('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'slots_game')
    ]

    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)

    markup = builder.adjust(1).as_markup()

    remove_stars(user_id, stars_to_play)


    if reward > 0:
        log_slot_play(user_id, stars_to_play, reward, value, slot_text, "–í—ã–∏–≥—Ä–∞–ª")
        await bot.send_message(
            user_id,
            f'üéÅ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b>\n\n<i>–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: <span class="tg-spoiler">{reward} ‚≠êÔ∏è</span></i>',
            parse_mode='HTML',
            reply_markup=markup
        )
        add_stars(user_id, reward)
    else:
        log_slot_play(user_id, stars_to_play, 0, value, slot_text, "–ü—Ä–æ–∏–≥—Ä–∞–ª")
        await bot.send_message(
            user_id,
            "<b>üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b>\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!</i>",
            parse_mode='HTML',
            reply_markup=markup
        )


async def send_slots_menu(user_id: int, bot: Bot):
    builder = InlineKeyboardBuilder()

    buttons = [
        ('üîÑ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç', 'spin_slot'),
        ('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'slots_info'),
        ('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_main')
    ]

    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)

    markup = builder.adjust(2, 1).as_markup()

    user_balance = get_balance_user(user_id)
    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile("photo/slots.png"),
        caption=f"‚ÑπÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: üé∞ <b>–°–ª–æ—Ç—ã</b>\n\nüí∏ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_balance}</b> ‚≠êÔ∏è",
        parse_mode='HTML',
        reply_markup=markup
    )

async def send_games_menu(user_id, bot):
    builder = InlineKeyboardBuilder()

    buttons = [
        ('üé∞ –°–ª–æ—Ç—ã', 'slots_game')
    ]

    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)

    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")

    markup = builder.adjust(1).as_markup()

    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile("photo/games.png"),
        caption="<b>‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</b>\n\n<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∏–Ω–∏-–∏–≥—Ä—ã:</i>\n1Ô∏è‚É£ <b>–°–ª–æ—Ç—ã</b> - –∫—Ä—É—Ç–∏ —Å–ª–æ—Ç—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π!\n\n<i>–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –¥–æ–±–∞–≤–∏–º –µ—â—ë –∏–≥—Ä—ã!</i>",
        parse_mode='HTML',
        reply_markup=markup
    )
    

async def send_main_menu(
    user_id: int,
    bot: Bot,
    call: CallbackQuery | Message | None = None
) -> None:
    if call is not None:
        try:
            chat_id = call.from_user.id
            message_id = call.message.message_id if isinstance(call, CallbackQuery) else call.message_id
            await bot.delete_message(chat_id=chat_id, message_id=message_id - 1)
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            await bot.delete_message(chat_id=chat_id, message_id=message_id + 1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    builder = InlineKeyboardBuilder()
    buttons = [
        ('üé∞ –ú–∏–Ω–∏-–ò–≥—Ä—ã', 'games'),
        ('üåü –ö—É–ø–∏—Ç—å / –ü—Ä–æ–¥–∞—Ç—å —Ñ–æ—Ç–æ', 'photo_selling'),
        ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
        ('üîÑ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'stars_withdraw'),
        ('üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'get_ref'),
        ('üèÜ –¢–æ–ø', 'top')
    ]
    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)

    builder.button(text="üìï –ü–æ–º–æ—â—å", url=admin_url)

    builder.adjust(1, 1, 2, 2, 1)
    markup = builder.as_markup()

    sell_count = get_total_photo_selling_count()
    withdrawn_count = get_total_withdrawn()

    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile("photo/start.png"),
        caption=(
            "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é! ‚ú®</b>\n\n"
            f"üì∏ <b>–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ:</b> <code>{sell_count}</code>\n"
            f"üí∞ <b>–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ:</b> <code>{withdrawn_count}</code>\n\n"
            "<b>‚ùî –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
            "<blockquote>"
            "üîπ <i>–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ</i> ‚Äî –∑–∞ –ø—Ä–æ–¥–∞–∂—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–≤—ë–∑–¥—ã.\n"
            "üîπ <i>–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i> ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã\n"
            "üîπ <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</i> ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n"
            "</blockquote>\n"
            "üì≤ <i>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
        ),
        parse_mode='HTML',
        reply_markup=markup
    )

@router.callback_query(F.data == "get_ref")
async def get_url_callback(call: CallbackQuery, bot: Bot):

    user_id = call.from_user.id
    user = call.from_user
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return

    if subgram_status[0]:
        response = await request_op(
                user_id=user_id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return
    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user_id, lang_code=user.language_code):
        return

    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    url = await create_url_referral(bot, user_id)
    markup_back_inline = InlineKeyboardBuilder()
    markup_back_inline.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={url}")
    markup_back_inline.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_back = markup_back_inline.adjust(1,1).as_markup()

    await bot.send_photo(
        chat_id=user_id,
        photo=FSInputFile('photo/ref_url.png'),
        caption=f"<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{url}</code>",
        parse_mode='HTML',
        reply_markup=markup_back
    )

@router.callback_query(F.data == "back_main")
async def back_main(call: CallbackQuery, bot: Bot):
    user = call.from_user
    if subgram_status[0]:
        response = await request_op(
                user_id=call.from_user.id,
                chat_id=call.message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=None,
                is_premium=getattr(user, 'is_premium', None)
            )

        if response != 'ok':
            return
    if flyer_status[0] and not await flyer_check(key=FLYER_TOKEN, user_id=user.id, lang_code=user.language_code):
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    builder_start = InlineKeyboardBuilder()
    buttons = [
            ('üé∞ –ú–∏–Ω–∏-–ò–≥—Ä—ã', 'games'),
            ('üåü –ö—É–ø–∏—Ç—å / –ü—Ä–æ–¥–∞—Ç—å —Ñ–æ—Ç–æ', 'photo_selling'),
            ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
            ('üîÑ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'stars_withdraw'),
            ('üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'get_ref'),
            ('üèÜ –¢–æ–ø', 'top')
        ]

    for text, callback_data in buttons:
        builder_start.button(text=text, callback_data=callback_data)

    builder_start.button(text="üìï –ü–æ–º–æ—â—å", url=admin_url)

    builder_start.adjust(1, 1, 2, 2, 1)
    markup = builder_start.as_markup()
    user_id = call.from_user.id
    sell_count = get_total_photo_selling_count()
    withdrawn_count = get_total_withdrawn()
    await bot.send_photo(
            chat_id=user_id,
            photo=FSInputFile("photo/start.png"),
            caption=(
                "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é! ‚ú®</b>\n\n"
                f"üì∏ <b>–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ:</b> <code>{sell_count}</code>\n"
                f"üí∞ <b>–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ:</b> <code>{withdrawn_count}</code>\n\n"
                "<b>‚ùî –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
                "<blockquote>"
                "üîπ <i>–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ</i> ‚Äî –∑–∞ –ø—Ä–æ–¥–∞–∂—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–≤—ë–∑–¥—ã.\n"
                "üîπ <i>–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i> ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã\n"
                "üîπ <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</i> ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n"
                "</blockquote>\n"
                "üì≤ <i>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
            ),
            parse_mode='HTML',
            reply_markup=markup
        )

@router.callback_query(F.data.startswith("check_subs"))
async def check_subs_callback(call: CallbackQuery, bot: Bot):
    user = call.from_user
    user_id = call.from_user.id
    refferal_id = None
    try:
        refferal_id = int(call.data.split(":")[1])
    except IndexError:
        pass
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return

    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    channels = get_channels_ids()
    

    if await check_subscription(user_id, channels, bot, refferal_id):
        if not user_exists(user_id):
            if refferal_id and user_exists(refferal_id):
                add_user(user_id, user.first_name, refferal_id)
                await handle_referral_bonus(refferal_id, user_id, bot)
            else:
                add_user(user_id, user.first_name, None)
            
        sell_count = get_total_photo_selling_count()
        withdrawn_count = get_total_withdrawn()
        builder_start = InlineKeyboardBuilder()
        buttons = [
            ('üé∞ –ú–∏–Ω–∏-–ò–≥—Ä—ã', 'games'),
            ('üåü –ö—É–ø–∏—Ç—å / –ü—Ä–æ–¥–∞—Ç—å —Ñ–æ—Ç–æ', 'photo_selling'),
            ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
            ('üîÑ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'stars_withdraw'),
            ('üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'get_ref'),
            ('üèÜ –¢–æ–ø', 'top')
        ]

        for text, callback_data in buttons:
            builder_start.button(text=text, callback_data=callback_data)

        builder_start.button(text="üìï –ü–æ–º–æ—â—å", url=admin_url)

        builder_start.adjust(1, 1, 2, 2, 1)
        markup = builder_start.as_markup()
        await bot.send_message(user_id, "‚≠ê")
        await bot.send_photo(
            chat_id=user_id,
            photo=FSInputFile("photo/start.png"),
            caption=(
                "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é! ‚ú®</b>\n\n"
                f"üì∏ <b>–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ:</b> <code>{sell_count}</code>\n"
                f"üí∞ <b>–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ:</b> <code>{withdrawn_count}</code>\n\n"
                "<b>‚ùî –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
                "<blockquote>"
                "üîπ <i>–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ</i> ‚Äî –∑–∞ –ø—Ä–æ–¥–∞–∂—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–≤—ë–∑–¥—ã.\n"
                "üîπ <i>–ò–≥—Ä–∞–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i> ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã\n"
                "üîπ <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</i> ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n"
                "</blockquote>\n"
                "üì≤ <i>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
            ),
            parse_mode='HTML',
            reply_markup=markup
        )
    else:
        await bot.answer_callback_query(call.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def check_subscription(user_id: int, channel_ids: list, bot: Bot, referral_id: str = None) -> bool:
    if not channel_ids:
        return True

    builder = InlineKeyboardBuilder()

    for channel_id in channel_ids:
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                invite_link = get_channel(channel_id)
                subscribe_button = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=invite_link['link_invite'])
                builder.add(subscribe_button)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return False

    if builder.export():
        markup: InlineKeyboardMarkup = builder.as_markup()
        check_data = f"check_subs:{referral_id}" if referral_id else "check_subs"
        check_button = InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=check_data)
        markup.inline_keyboard.append([check_button])

        await bot.send_photo(
            chat_id=user_id,
            photo=FSInputFile('photo/check_sub.png'),
            caption="<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</b>",
            parse_mode='HTML',
            reply_markup=markup
        )
        return False

    return True

async def flyer_check(key: str, user_id: int, lang_code: str):
    if user_id in admins_id:
        return True
    
    async with aiohttp.ClientSession() as session:
        payload = {
            "key": key,
            "user_id": user_id,
            "language_code": lang_code,
            "message": {
                "text": "<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤</b>\n\n<blockquote><b>üíú–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ù–ê–°</b></blockquote>",
                "button_bot": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
                "button_channel": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                "button_url": "–ü–µ—Ä–µ–π—Ç–∏",
                "button_boost": "–ó–∞–±—É—Å—Ç–∏—Ç—å",
                "button_fp": "–í—ã–ø–æ–ª–Ω–∏—Ç—å"
            }
        }

        async with session.post("https://api.flyerservice.io/check", json=payload) as response:

            if response.status != 200:
                print(f"Flyer API error: status {response.status}")
                return False
            
            data = await response.json()

            if data.get("skip"):
                return True
            else:
                return False

    

async def handle_referral_bonus(ref_id: int, user_id: int, bot: Bot):
    try:
        add_stars(ref_id, stars_reffer[0])
        markup_back_inline = InlineKeyboardBuilder()
        markup_back_inline.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={(await create_url_referral(bot, ref_id))}")
        markup_back = markup_back_inline.as_markup()
        await bot.send_message(ref_id, f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ <code>{stars_reffer[0]}</code>‚≠êÔ∏è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n\n<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b> \n<code>{(await create_url_referral(bot, ref_id))}</code>", parse_mode='HTML', reply_markup=markup_back)
    except Exception as e:
        print(f"Referral bonus error: {e}")

async def create_url_referral(bot: Bot, user_id: int):
    return f"https://t.me/{(await bot.me()).username}?start={user_id}"

async def safe_edit_message(bot, chat_id, message_id, new_text, reply_markup=None):
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=new_text,
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )
    except TelegramBadRequest as e:
        print("error")
        if "message is not modified" not in str(e):
            raise

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    dp.message.middleware(AntiFloodMiddleware(limit=1))
    dp.callback_query.middleware(AntiFloodMiddleware(limit=1))
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("*" * 100)
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. Developed by @kalipsom | @meroqty")
        print("*" * 100)